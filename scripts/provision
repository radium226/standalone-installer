#!/bin/sh
set -euo pipefail

export SCRIPT_FILE_PATH="${0}"

export FOLDER_PATH="/tmp/installer"

bootstrap_python()
{
  local options
  local scope
  local environment

  options="$( getopt -o s:e: --long scope:,environment: -n "bootstrap_python" -- "${@}" )"
  eval set -- "${options}"

  while true; do
    case "${1}" in
    -s | --scope) scope="${2}"; shift 2 ;;
    -e | --environment ) environment="${2}"; shift 2 ;;
    --) shift; break ;;
    *) break ;;
    esac
  done

  case "${scope}" in
    "local")
        # Bootstrapping Python on local host
        tar -xf "${FOLDER_PATH}/vendors/pypy/pypy3.5-6.0.0-linux_x86_64-portable.tar.bz2" -C "${FOLDER_PATH}"
        test -e "${FOLDER_PATH}/pypy" || ln -s "${FOLDER_PATH}/pypy3.5-6.0.0-linux_x86_64-portable" "${FOLDER_PATH}/pypy"

        (
          # Checking PyPy version
          export PATH="${FOLDER_PATH}/pypy/bin:${PATH}"
          pypy --version
        )
      ;;

    "remote")
        # Bootstrapping Python on remote hosts
        ansible_playbook \
          --inventory "${ANSIBLE_FOLDER_PATH}/inventories/${environment}.ini" \
          "${ANSIBLE_FOLDER_PATH}/bootstrap-pypy.yml"
      ;;
  esac
}

ansible_playbook()
{
  (
    set +u
    export PATH="${FOLDER_PATH}/pypy/bin:${PATH}"
    source "${VIRTUALENV_FOLDER_PATH}/bin/activate"

    export ANSIBLE_CONFIG="${FOLDER_PATH}/ansible/ansible.cfg"
    ansible-playbook "${@}"
  )
}

ansible_playbook_escalate()
{
  (
    set +u
    export PATH="${FOLDER_PATH}/pypy/bin:${PATH}"
    source "${VIRTUALENV_FOLDER_PATH}/bin/activate"

    export ANSIBLE_CONFIG="${FOLDER_PATH}/ansible/ansible.cfg"
    ANSIBLE_BECOME_EXE="escalate.sh" ansible-playbook "${@}"
  )
}

export ANSIBLE_FOLDER_PATH=${FOLDER_PATH}/ansible
export VIRTUALENV_FOLDER_PATH="${FOLDER_PATH}/virtualenv"
export WHEELS_FOLDER_PATH="${FOLDER_PATH}/vendors/python-wheels"

bootstrap_ansible()
{
  (
    set +u
    # Setup the virtual environment
    export PATH="${FOLDER_PATH}/pypy/bin:${PATH}"
    virtualenv-pypy "${VIRTUALENV_FOLDER_PATH}"
    source "${VIRTUALENV_FOLDER_PATH}/bin/activate"

    if ! which "ansible"; then
      # Install Ansible
      local python_source_file_path
      find "${FOLDER_PATH}/vendors/python-sources" -name "*.tar.gz" | while read python_source_file_path; do
        pip install --no-index --find-links="${WHEELS_FOLDER_PATH}" "${python_source_file_path}"
      done
      pip install --no-index --find-links="${WHEELS_FOLDER_PATH}" "ansible"
    fi

    # Check the version
    ansible --version
  )
}

bootstrap()
{
  local options
  local environment
  options="$( getopt -o e: --long environment: -n "bootstrap_python" -- "${@}" )"
  eval set -- "${options}"

  while true; do
    case "${1}" in
    -e | --environment ) environment="${2}"; shift 2 ;;
    --) shift; break ;;
    *) break ;;
    esac
  done

  bootstrap_python --scope="local"
  bootstrap_ansible
  bootstrap_python --scope="remote" --environment="${environment}"
}

main()
{
  local options
  local environment
  options="$( getopt -o e: --long environment: -n "bootstrap_python" -- "${@}" )"
  eval set -- "${options}"

  while true; do
    case "${1}" in
    -e | --environment ) environment="${2}"; shift 2 ;;
    --) shift; break ;;
    *) break ;;
    esac
  done

  bootstrap --environment="${environment}"

  ansible_playbook_escalate -vvvv \
    --inventory "${ANSIBLE_FOLDER_PATH}/inventories/${environment}.ini" \
    "${ANSIBLE_FOLDER_PATH}/id.yml"
}

main "${@}"
exit ${?}
